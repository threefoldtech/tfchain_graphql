type Entity @entity {
  gridVersion: Int!
  entityID: Int!
  name: String!
  country: String
  city: String
  accountID: String!
}

type Twin @entity {
  gridVersion: Int!
  twinID: Int!
  accountID: String!
  relay: String
  publicKey: String
}

type EntityProof @entity {
  entityID: Int!
  signature: String!
  twinRel: Twin!
}

type Farm @entity {
  gridVersion: Int!
  farmID: Int!
  name: String!
  twinID: Int!
  pricingPolicyID: Int!
  certification: FarmCertification
  publicIPs: [PublicIp!] @derivedFrom(field: "farm")
  stellarAddress: String
  dedicatedFarm: Boolean
}

type PublicIp @entity {
  farm: Farm!
  gateway: String!
  ip: String!
  contractId: BigInt!
}

type Node @entity {
  gridVersion: Int!
  nodeID: Int!
  farmID: Int!
  twinID: Int!
  location: Location!
  country: String
  city: String
  publicConfig: PublicConfig @derivedFrom(field: "node")
  resourcesTotal: NodeResourcesTotal @derivedFrom(field: "node")
  uptime: BigInt
  created: Int!
  farmingPolicyId: Int!
  interfaces: [Interfaces!] @derivedFrom(field: "node")
  certification: NodeCertification
  secure: Boolean
  virtualized: Boolean
  serialNumber: String
  createdAt: BigInt!
  updatedAt: BigInt!
  connectionPrice: Int
  power: NodePower
  dedicated: Boolean!
  extraFee: BigInt
}

type NodePower {
  state: PowerState!
  target: Power!
}

enum PowerState {
  Up
  Down
}

enum Power {
  Up
  Down
}

type NodeResourcesTotal @entity {
  node: Node! @unique
  hru: BigInt!
  sru: BigInt!
  cru: BigInt!
  mru: BigInt!
}

type Interfaces @entity {
  node: Node!
  name: String!
  mac: String!
  ips: String!
}

enum FarmCertification {
  NotCertified
  Gold
}

enum NodeCertification {
  Diy
  Certified
}

type PublicConfig @entity {
  node: Node! @unique
  ipv4: String
  ipv6: String
  gw4: String
  gw6: String
  domain: String
}

type Location @entity {
  longitude: String!
  latitude: String!
}

type PricingPolicy @entity {
  gridVersion: Int!
  pricingPolicyID: Int!
  name: String!
  su: Policy!
  cu: Policy!
  nu: Policy!
  ipu: Policy!
  foundationAccount: String!
  certifiedSalesAccount: String!
  dedicatedNodeDiscount: Int!
}

type Policy {
  value: Int
  unit: String
}

type Country @entity {
  countryID: Int!
  code: String!
  name: String!
  region: String!
  subregion: String!
  lat: String
  long: String
}

type City @entity {
  cityID: Int!
  countryID: Int!
  name: String!
}

type NodeContract @entity {
  gridVersion: Int!
  contractID: BigInt!
  twinID: Int!
  nodeID: Int!
  deploymentData: String!
  deploymentHash: String!
  numberOfPublicIPs: Int!
  state: ContractState!
  resourcesUsed: ContractResources
  createdAt: BigInt!
  solutionProviderID: Int
}

type ContractResources @entity {
  contract: NodeContract!
  hru: BigInt!
  sru: BigInt!
  cru: BigInt!
  mru: BigInt!
}

type NameContract @entity {
  gridVersion: Int!
  contractID: BigInt!
  twinID: Int!
  name: String!
  state: ContractState!
  createdAt: BigInt!
  solutionProviderID: Int
}

type RentContract @entity {
  gridVersion: Int!
  contractID: BigInt!
  twinID: Int!
  nodeID: Int!
  state: ContractState!
  createdAt: BigInt!
  solutionProviderID: Int
}

type SolutionProvider @entity {
  solutionProviderID: BigInt!
  description: String!
  link: String!
  approved: Boolean!
  providers: [Provider]
}

type Provider {
  who: String!
  take: Int!
}

enum ContractState {
  Created
  Deleted
  OutOfFunds
  GracePeriod
}

type NruConsumption @entity {
  contractID: BigInt!
  timestamp: BigInt!
  window: BigInt
  nru: BigInt
}

type ContractBillReport @entity {
  contractID: BigInt!
  discountReceived: DiscountLevel!
  amountBilled: BigInt!
  timestamp: BigInt!
}

enum DiscountLevel {
  None
  Default
  Bronze
  Silver
  Gold
}

type FarmingPolicy @entity {
  gridVersion: Int!
  farmingPolicyID: Int!
  name: String
  cu: Int
  su: Int
  nu: Int
  ipv4: Int
  minimalUptime: Int
  policyCreated: Int
  policyEnd: Int
  immutable: Boolean
  default: Boolean
  nodeCertification: NodeCertification
  farmCertification: FarmCertification
}

type UptimeEvent @entity {
  nodeID: Int!
  uptime: BigInt!
  timestamp: BigInt!
}

type MintTransaction @entity {
  amount: BigInt!
  target: String!
  block: Int!
}

type BurnTransaction @entity {
  block: Int!
  amount: BigInt!
  target: String!
}

type RefundTransaction @entity {
  block: Int!
  amount: BigInt!
  target: String!
  txHash: String!
}

type ServiceContract @entity {
  serviceContractID: BigInt!
  serviceTwinID: Int!
  consumerTwinID: Int!
  baseFee: BigInt!
  variableFee: BigInt!
  metadata: String!
  acceptedByService: Boolean!
  acceptedByConsumer: Boolean!
  lastBill: BigInt!
  state: ServiceContractState!
}

enum ServiceContractState {
  Created
  AgreementReady
  ApprovedByBoth
}

type ServiceContractBill @entity {
  serviceContractID: BigInt!
  variableAmount: BigInt!
  window: BigInt!
  metadata: String
  amount: BigInt!
}

type PowerTargetReport @entity {
  farmID: Int!
  nodeID: Int!
  newPowerTarget: Power!
  block: Int!
  timestamp: BigInt!
}

type PowerStateReport @entity {
  farmID: Int!
  nodeID: Int!
  newPowerStatus: PowerState!
  block: Int!
  timestamp: BigInt!
}